class Tarea {
    constructor(codigo, duracion) {
        this.codigo = codigo;
        this.duracion = duracion;
    }

    getDuracion() {
        return this.duracion;
    }

    getCosto() {
        return this.duracion <= 5 ? 100 : 200;
    }
}

class TareaCompuesta {
    constructor(codigo, duracion, tareas = []) {
        this.codigo = codigo;
        this.duracion = duracion;
        this.tareas = tareas;
    }

    agregar(unaTarea) {
        this.tareas.push(unaTarea);
    }

    getDuracion() {
        return this.tareas.reduce((acum, tarea) => acum + tarea.getDuracion(), this.duracion);
    }

    getCosto() {
        return this.tareas.reduce((acum, tarea) => acum + tarea.getCosto(), 0);
    }
}

class Proyecto {
    constructor(tareas = []) {
        this.tareas = tareas;
    }

    getDuracion() {
        return this.tareas.reduce((acum, tarea) => acum + tarea.getDuracion(), 0);
    }

    getCosto() {
        return this.tareas.reduce((acum, tarea) => acum + tarea.getCosto(), 0);
    }
}

const t132 = new Tarea("1.3.2", 1);
const t131 = new Tarea("1.3.1", 2);
const t13 = new TareaCompuesta("1.3", 3, [t132, t131]);

const t1221 = new Tarea("1.2.2.1", 3);
const t1222 = new Tarea("1.2.2.2", 6);
const t122 = new TareaCompuesta("1.2.2", 1, [t1221, t1222]);

const t121 = new Tarea("1.2.1", 4);
const t12 = new TareaCompuesta("1.2", 4, [t121, t122]);

const t11 = new Tarea("1.1", 6);
const t1 = new Tarea("1", 2);

// Now you can create a project
const proyecto = new Proyecto([t13, t12, t11, t1]);

console.log("Duraci√≥n del proyecto:", proyecto.getDuracion());
console.log("Costo total del proyecto:", proyecto.getCosto());



